#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <io.h>
#include <conio.h>

using namespace std;

// сканирование папок и подпапок
void scanFile(char* dir, unsigned long* min_size, unsigned long* count)
{
	// добавка к пути '\'
	strcat(dir, "\\");

	// указатель на начало имени в пути
	char* name = dir + strlen(dir);

	// имени присвается маска '*'
	strcpy(name, "*");

	// список файлов 
	_finddata_t list;

	// указатель на список и создание заполнение списка файлов
	long point = _findfirst(dir, &list);

	// сканирование списка 
	do
	{
		// если файл является папкой с именем "." или ".."
		if ((list.attrib & _A_SUBDIR) && (!strcmp(list.name, ".") || !strcmp(list.name, "..")))
			continue;

		// переменная для счётчика
		int* i = new int;

		// вывод сивола '>' по числу уровня папки
		for (*i = 0; *i < *(count + 9);  ++*i)
		{
			cout << "|";
		}

		// отчистка памяти 
		delete i;

		// добавка имени текущего файла к пути
		strcpy(name, list.name);

		// вывод имени файла
		cout << list.name << "     ";

		// если файл является папкой 
		if (list.attrib & _A_SUBDIR)
		{
			// вывод атрибута
			cout << "<DIR>" << endl;

			// увеличение счётчика количества подпапок
			++*count;

			// увеличение уровня папки
			++* (count + 9);

			// запуск этой же функции
			scanFile(dir, min_size, count);

			// уменьшение уровня папки
			--* (count + 9);

			continue;
		}

		// если файл
		else
		{
			// вывод размера файла
			cout << list.size << endl;
			
			// увеличение счётчика всех файлов
			++*(count + 1);

			// прибавление размера текущего файла к общей сумме всех файлов
			*(count + 2) += list.size;

			// если размер файла меньше требуемого минимального размера
			if (list.size < *min_size)
			{
				// увеличение счётчика файлов размер, которых меньше требуемого минимального размера 
				++*(count + 3);

				// прибавление размера текущего файла к общему размеру всех файлов, размер которых меньше 
				// минимума
				++* (count + 4) += list.size;

				// удаление файла; если файл удалён неудачно
				if (remove(dir) == -1)
				{
					// увеличение счётчика количетсва неудачно удалённых файлов
					++* (count + 7);

					// прибавление размера файла к общему размеру всех неудачно удалённых файлов
					*(count + 8) += list.size;

					continue;
				}

				// увеличение счётчика количества удачно удалённых файлов
				++*(count + 5);

				// прибавление размера файла к общему размеру всех удачно удалённых файлов
				*(count + 6) += list.size;
			}
		}

	} while (!_findnext(point, &list));

	// удаление списка 
	_findclose(point);
}

void task2()
{
	// 2. Пользователь вводит путь к папке и размер файлов,
	// программа сканирует папку и подпапки и удаляет все файлы,
	// которые меньше указанного размера(использовать функцию remove(filename))

	// путь к папке
	char* dir = new char[_MAX_PATH];

	// ввод пути
	cout << "Enter folder path: ";
	cin.ignore();
	cin.getline(dir, _MAX_PATH);

	cout << endl;

	// минимальный размер файла
	unsigned long* min_size = new unsigned long;

	// ввод минимального размера файла
	cout << "Enter minimum size: ";
	cin >> *min_size;

	// ожилание нажатия любой клавиши
	cout << "\n\n\n\n\nPRESS ANY KEY TO START...";

	// нажатие любой клавиши
	_getch();

	// отчистка консоли
	system("cls");

	// счётчики: [0] - всего подпапок; [1] - всего файлов; [2] - общий размер всех фалов; 
	// [3] - количество файлов меньше минимального размера; [4] - размер файлов меньше 
	// минимального размера; [5] - количество удачно удалёных файлов; [6] - размер удачно 
	// удалённых файлов; [7] - количество неудачно удалённых файлов; [8] - размер неудачно 
	// удалённых файлов; [9] - уровень папки;
	unsigned long* count = new unsigned long[10];

	// [0] - всего подпапок
	*count = 0;
	// [1] - всего файлов
	*(count + 1) = 0;
	// [2] - общий размер всех фалов
	*(count + 2) = 0;
	// [3] - количество файлов меньше минимального размера 
	*(count + 3) = 0;
	// [4] - размер файлов меньше минимального размера
	*(count + 4) = 0;
	// [5] - количество удачно удалёных файлов 
	*(count + 5) = 0;
	// [6] - размер удачно удалённых файлов
	*(count + 6) = 0;
	// [7] - количество неудачно удалённых файлов
	*(count + 7) = 0;
	// [8] - размер неудачно удалённых файлов
	*(count + 8) = 0;
	// [9] - уровень папки
	*(count + 9) = 0;

	// запуск функии сканирования
	scanFile(dir, min_size, count);

	// ожидание нажатия любой клавиши для вывод отчёта
	cout << "\n\n\n\n\nPRESS ANY KEY TO OUTPUT THE REPORT..." << endl;

	// ожилание нажатия клавиши
	_getch();

	// отчистка консоли
	system("cls");

	// вывод отчёта о выполнении
	cout << "          REPORT          " << endl << endl;
	cout << "> Count all subdir: " << *count << endl << endl;
	// вывод количетсва всех файлов
	cout << "> Count all file: " << *(count + 1) << endl;
	// вывод общего размера всех файлов
	cout << "> Size all files: " << *(count + 2) << endl << endl;
	// вывод количетсва файлов размер, которых меньше минимально требуемого
	cout << "> Count files size less minimum: " << *(count + 3) << endl;
	// размер всех файлов размер, которых меньше минимально требуемого
	cout << "> Size all files size less minimum: " << *(count + 4) << endl << endl;
	// количество удачно удалённых файлов
	cout << "> Count of successfully delete files: " << *(count + 5) << endl;
	// размер удачно удалённых файлов 
	cout << "> Size all successfully delete files: " << *(count + 6) << endl << endl;
	// количество неудачно удалённых файлов
	cout << "> Count of unsuccessfully delete files: " << *(count + 7) << endl;
	// размер неудачно удалённых файлов
	cout << "> Size all unsuccessfully delete files: " << *(count + 8) << endl << endl;

	// отчистка памяти
	delete[] dir;
	delete count;

	// ожидание нажатия любой клавиши для выхода из программы
	cout << "\n\n\n\n\nPRESS ANY KEY TO EXIT..." << endl;
	_getch();
}