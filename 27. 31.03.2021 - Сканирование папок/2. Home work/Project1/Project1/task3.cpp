#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <io.h>
#include <conio.h>
#include <direct.h>

using namespace std;

// сканирование папок
void scanFolder(char* dir, unsigned long* count)
{
	// добавление к пути '\\'
	strcat(dir, "\\");

	// указатль на начало имени файла
	char* name = dir + strlen(dir);

	// маска для файлов 
	strcpy(name, "*");

	// список файлов
	_finddata_t list;

	// указатель на список и создавние списка файлов 
	long point = _findfirst(dir, &list);

	// сканирование списка
	do
	{
		// если это файл является папкой и имеет имя "."  или ".."
		if ((list.attrib & _A_SUBDIR) && (!strcmp(list.name, ".") || !strcmp(list.name, "..")))
			continue;

		// добавление имени файла к пути
		strcpy(name, list.name);

		// переменная для цикла
		int* i = new int;

		// вывод символа "|" по числу уровня папки
		for (*i = 0; *i < *(count + 11); ++*i)
		{
			cout << "|";
		}

		// отчистка памяти
		delete i;

		// вывод имени файла
		cout << list.name << "     ";

		// если файл является папкой	
		if (list.attrib & _A_SUBDIR)
		{
			// вывод атрибута 
			cout << "<DIR>" << endl;

			// увеличение счётчика количества подпапок
			++* count;

			// если подпапка находится внутри указанных папок
			if (*(count + 16) != 0)
			{
				// увеличение уровня папки
				++* (count + 11);

				// запуск этой же функции
				scanFolder(dir, count);

				// уменьшение уровня папки
				--* (count + 11);

				// повторное добавление имени файла к пути
				strcpy(name, list.name);

				// удаление папки; если неудачно
				if (_rmdir(dir) == -1)
				{
					// увеличение счётчика неудачно удалённых папок
					++* (count + 13);

					continue;
				}

				// увеличение счётчика удачно удалённых папок
				++* (count + 12);

				continue;
			}


			// если имя папки ".vs"
			if (!strcmp(list.name, ".vs") && *(count + 16) == 0)
			{
				// увеличение счётчика папок с названиями: ".vs", "Debug", "obj", "x64"
				++* (count + 1);

				// увеличние счётчика количества папок с названием: ".vs"
				++* (count + 3);

				// показатель родительской папки
				*(count + 16) = 1;

				// увеличение уровня папки
				++* (count + 11);

				// запуск этой же функции
				scanFolder(dir, count);
				
				// уменьшение уровня папки
				--* (count + 11);
				
				// повторное добавление имени файла к пути
				strcpy(name, list.name);

				// удаление папки; если неудачно
				if (_rmdir(dir) == -1)
				{
					// увеличение счётчика неудачно удалённых папок
					++* (count + 13);

					continue;
				}

				// увеличение счётчика удачно удалённых папок
				++* (count + 12);


				// аннуляция показателя родительской папки
				*(count + 16) = 0;

				continue;
			}
			// если имя папки "Debug"
			else if (!strcmp(list.name, "Debug") && *(count + 16) == 0)
			{
				// увеличение счётчика папок с названиями: ".vs", "Debug", "obj", "x64"
				++* (count + 1);

				// увеличние счётчика количества папок с названием: "Debug"
				++* (count + 5);

				// показатель родительской папки
				*(count + 16) = 2;

				// увеличение уровня папки
				++* (count + 11);

				// запуск этой же функции
				scanFolder(dir, count);

				// уменьшение уровня папки
				--* (count + 11);

				// повторное добавление имени файла к пути
				strcpy(name, list.name);

				// удаление папки; если неудачно
				if (_rmdir(dir) == -1)
				{
					// увеличение счётчика неудачно удалённых папок
					++* (count + 13);

					continue;
				}

				// увеличение счётчика удачно удалённых папок
				++* (count + 12);

				// аннуляция показателя родительской папки
				*(count + 16) = 0;

				continue;
			}
			// если имя папки "obj"
			else if (!strcmp(list.name, "obj") && *(count + 16) == 0)
			{
				// увеличение счётчика папок с названиями: ".vs", "Debug", "obj", "x64"
				++* (count + 1);

				// увеличние счётчика количества папок с названием: "obj"
				++* (count + 7);

				// показатель родительской папки
				*(count + 16) = 3;

				// увеличение уровня папки
				++* (count + 11);

				// запуск этой же функции
				scanFolder(dir, count);

				// уменьшение уровня папки
				--* (count + 11);

				// повторное добавление имени файла к пути
				strcpy(name, list.name);

				// удаление папки; если неудачно
				if (_rmdir(dir) == -1)
				{
					// увеличение счётчика неудачно удалённых папок
					++* (count + 13);

					continue;
				}

				// увеличение счётчика удачно удалённых папок
				++* (count + 12);

				// уменьшение уровня папки
				--* (count + 11);

				// аннуляция показателя родительской папки
				*(count + 16) = 0;

				continue;
			}
			// если имя папки "X64"
			else if (!strcmp(list.name, "x64") && *(count + 16) == 0)
			{
				// увеличение счётчика папок с названиями: ".vs", "Debug", "obj", "x64"
				++* (count + 1);

				// увеличние счётчика количества папок с названием: "x64"
				++* (count + 9);

				// показатель родительской папки
				*(count + 16) = 4;

				// увеличение уровня папки
				++* (count + 11);

				// запуск этой же функции
				scanFolder(dir, count);

				// уменьшение уровня папки
				--* (count + 11);

				// повторное добавление имени файла к пути
				strcpy(name, list.name);

				// удаление папки; если неудачно
				if (_rmdir(dir) == -1)
				{
					// увеличение счётчика неудачно удалённых папок
					++* (count + 13);

					continue;
				}

				// увеличение счётчика удачно удалённых папок
				++* (count + 12);

				// аннуляция показателя родительской папки
				*(count + 16) = 0;

				continue;
			}

			// увеличение уровня папки
			++* (count + 11);

			// запуск этой же функции
			scanFolder(dir, count);

			// уменьшение уровня папки
			--* (count + 11);

			continue;
		}

		// если это файл
		else
		{
			// вывод размера файла 
			cout << list.size << endl;

			// если родительска папка одна из указанных
			if (*(count + 16) != 0)
			{
				// если родительской папкой являтся ".vs"
				if (*(count + 16) == 1)
				{
					// размер всех папок с заданными названиями
					*(count + 2) += list.size;

					// увеличение счётчика размера папки ".vs"
					*(count + 4) += list.size;
				}

				// если родительской папкой являтся "Debug"
				else if (*(count + 16) == 2)
				{
					// размер всех папок с заданными названиями
					*(count + 2) += list.size;

					// увеличение счётчика размера папки "Debug"
					*(count + 6) += list.size;
				}

				// если родительской папкой являтся "obj"
				else if (*(count + 16) == 3)
				{
					// размер всех папок с заданными названиями
					*(count + 2) += list.size;

					// увеличение счётчика размера папки "obj"
					*(count + 8) += list.size;
				}

				// если родительской папкой являтся "x64"
				else if (*(count + 16) == 4)
				{
					// размер всех папок с заданными названиями
					*(count + 2) += list.size;

					// увеличение счётчика размера папки "x64"
					*(count + 10) += list.size;
				}

				// удаление файла; если неуспешно
				if (remove(dir) == -1)
				{
					// увеличение счётчика неудачно удалённых файлов 
					++* (count + 15);

					// увеличение общего размера неудачно удалённых файлов
					*(count + 18) += list.size;

					continue;
				}

				// увеличение счётчика удачно удалённых файлов 
				++* (count + 14);
			
				// увеличение размера всех папок с заданными названиями
				*(count + 2) += list.size;

				// увеличение общего размера удачно удалённых файлов 
				*(count + 17) += list.size;
			}
		}
	} while (!_findnext(point, &list));

	// удаление списка 
	_findclose(point);
}

void task3()
{
	// 3. Пользователь вводит название исходной папки, программа
	// сканирует указанную папку и подпапки и удаляет все папки с
	// именами.vs, Debug, obj, X64 и все их подпапки. (использовать функцию rmdir)

	// путь к папке 
	char* dir = new char[_MAX_PATH];

	// ввод пути к папке 
	cout << "Enter folder path: ";
	cin.ignore();
	cin.getline(dir, _MAX_PATH);

	// нажатие любой клавиши для продолжения
	cout << "\n\n\n\n\nPRESS ANY KEY TO START SCAN" << endl;

	// нажатие клавиши
	_getch();

	// отчистка консоли
	system("cls");

	// счётчики: [0] - общее количество подпапок; [1] - количетсво найденных папок с названиями
	// ".vs", "Debug", "obj", "x64"; [2] - размер всех папок с заданными названиями; [3] - количетсво 
	// папок ".vs"; [4] - размер папок ".vs"; [5] - количетсво папок "Debug"; [6] - размер папок "Debug";
	// [7] - количетсво папок "obj"; [8] - размер папок "obj"; [9] - количетсво папок "x64"; [10] - размер 
	// папок "X64"; [11] - уровень папки; [12] - количество удачно удалённых папок; [13] - количество неудачно
	// удалённых папок; [14] - количество удачно удалённых файлов; [15] - количество неудачно удалённых файлов;
	// [16] - родительская папка: 0 - не из указанных, 1 - ".vs", 2 - "Dubug", 3 - "obj", 4 - "x64";
	// [17] - размер удачно удалённых папок; [18] - размер неудачно удалённых папок;
	unsigned long* count = new unsigned long[19];

	// [0] - общее количество подпапок
	*count = 0;
	// [1] - количетсво найденных папок с названиями ".vs", "Debug", "obj", "x64"
	*(count + 1) = 0;
	// [2] - размер всех папок с заданными названиями
	*(count + 2) = 0;
	// [3] - количетсво папок ".vs" 
	*(count + 3) = 0;
	// [4] - размер папок ".vs"
	*(count + 4) = 0;
	// [5] - количетсво папок "Debug"
	*(count + 5) = 0;
	// [6] - размер папок "Debug"
	*(count + 6) = 0;
	// [7] - количетсво папок "obj" 
	*(count + 7) = 0;
	// [8] - размер папок "obj"
	*(count + 8) = 0;
	// [9] - количетсво папок "x64" 
	*(count + 9) = 0;
	// [10] - размер папок "x64"
	*(count + 10) = 0;
	// [11] - уровень папки 
	*(count + 11) = 0;
	// [12] - количество удачно удалённых папок
	*(count + 12) = 0;
	// [13] - количество неудачно удалённых папок 
	*(count + 13) = 0;
	// [14] - количество удачно удалённых файлов 
	*(count + 14) = 0;
	// [15] - количество неудачно удалённых файлов
	*(count + 15) = 0;
	// [16] - родительская папка: 0 - не из указанных, 1 - ".vs", 2 - "Dubug", 3 - "obj", 4 - "x64"
	*(count + 16) = 0;
	// [17] - размер удачно удаленных файлов 
	*(count + 17) = 0;
	// [18] - размер неудачно удалённых файлов
	*(count + 18) = 0;
	
	// вызов функции
	scanFolder(dir, count);

	// ожидание нажатия любой клавиши для вывода отчёта о выполнении
	cout << "\n\n\n\n\nPRESS ANY KEY TO OUTPUT THE REPORT" << endl;

	// ожидание нажатия любой клавиши
	_getch();

	// отчистка консоли
	system("cls");

	// отчёт о выполнении
	cout << "          REPORT          " << endl << endl;
	// общее количество папок
	cout << "> Count all subdir: " << *count << endl << endl;
	// количество папок с названием: ".vs", "Debug", "obj", "x64"
	cout << "> Numbers of folders with key names: " << *(count + 1) << endl;
	// размер всех папок с названием: ".vs", "Debug", "obj", "x64"
	cout << "> All size of folders with key names: " << *(count + 2) << endl << endl;
	// количество папок ".vs"
	cout << "> Count folder name \".vs\": " << *(count + 3) << endl;
	// размер папко ".vs"
	cout << "> Size folders name \".vs\": " << *(count + 4) << endl << endl;
	// количество папок "Debug"
	cout << "> Count folder name \"Debug\": " << *(count + 5) << endl;
	// размер папко "Duebug"
	cout << "> Size folders name \"Debug\": " << *(count + 6) << endl << endl;
	// количество папок "obj"
	cout << "> Count folder name \"obj\": " << *(count + 7) << endl;
	// размер папко "obj"
	cout << "> Size folders name \"obj\": " << *(count + 8) << endl << endl;
	// количество папок "X64"
	cout << "> Count folder name \"x64\": " << *(count + 9) << endl;
	// размер папко "X64"
	cout << "> Size folders name \"x64\": " << *(count + 10) << endl << endl;
	// количество удачно удалённых папок
	cout << "> Count successfully delete folders: " << *(count + 12) << endl;
	// размер удачно удалённых папок
	cout << "> All size successfully delete folders: " << *(count + 17) << endl << endl;
	// количество неудачно удалённых папок
	cout << "> Count unsuccessfully delete folders: " << *(count + 13) << endl;
	// размер неудачно удалённых папок
	cout << "> All size unsuccessfully delete folders: " << *(count + 18) << endl << endl;
	// количество удачно удалённых файлов
	cout << "> Count successfully delete files: " << *(count + 14) << endl;
	// размер удачно удалённых файлов
	cout << "> All size successfully delete files: " << *(count + 17) << endl << endl;
	// колиество неудачно удалённых файлов 
	cout << "> Count unsuccessfully delete files: " << *(count + 15) << endl;
	// размер неудачно файлов папок
	cout << "> All size unsuccessfully delete files: " << *(count + 18) << endl << endl;

	// отчистка памяти
	delete[] dir, count;

	// ожидине нажатия любой клавиши для закрытия программы
	cout << "\n\n\n\n\nPRESS ANY KEY TO EXIT...";

	// нажатие любой клавиши
	_getch();
}